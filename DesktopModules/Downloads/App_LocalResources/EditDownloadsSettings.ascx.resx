<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="plInternalPath.Text" xml:space="preserve">
    <value>Physikalischer Pfad für die Downloads</value>
  </data>
  <data name="plInternalPath.Help" xml:space="preserve">
    <value>Gibt den physikalischen Speicherort an, an welchem sich die Dokumente befinden.
Dabei kann es sich um einen Laufwerkpfad (C:\Downloads),
oder eine Dateifreigabe (\\server\downloads) handeln.</value>
  </data>
  <data name="plPublicUrl.Text" xml:space="preserve">
    <value>Öffentliche Basis-Url für die Downloads</value>
  </data>
  <data name="plPublicUrl.Help" xml:space="preserve">
    <value>Wenn die Option virtuelles Verzeichniss ausgewählt ist, defniert die öffentliche Basis-Url, wo sich sich die Dokumente befinden.
Dabei kann es sich um einen FTP-Server (ftp:// ftp.microsoft.com/downloads)
oder eine Website (http://www.microsoft.com/downloads) handeln</value>
  </data>
  <data name="ModuleHelp.Text" xml:space="preserve">
    <value>&lt;h1&gt;About the Downloads Module&lt;/h1&gt;
&lt;p&gt;The Downloads Module show a  list of Downloads
&lt;/p&gt; </value>
  </data>
  <data name="ControlTitle_settings.Text" xml:space="preserve">
    <value>Downloads Modul Einstellungen</value>
  </data>
  <data name="plImageUrl.Help" xml:space="preserve">
    <value>Gibt, falls die Installation von DotNetNuke abweichend von der Standard-Installation erfolgt,
die öffentliche Url an, an welchem sich die Bilder befinden.
z.B. /desktopmodules/downloads/images</value>
  </data>
  <data name="plImageUrl.Text" xml:space="preserve">
    <value>Öffentliche Basis-Url  für die Bilder</value>
  </data>
  <data name="plUseDefaultLink.Help" xml:space="preserve">
    <value>Darstellung eines Symbols für Dokumente ohne sprachspezifische Auszeichnung</value>
  </data>
  <data name="plUseDefaultLink.Text" xml:space="preserve">
    <value>Symbol für Sprachunabhängige Dokumente</value>
  </data>
  <data name="plUseTitleLink.Help" xml:space="preserve">
    <value>Dokumente ohne sprachspezifische Auszeichnung, werden im Titel verlinkt.</value>
  </data>
  <data name="plUseTitleLink.Text" xml:space="preserve">
    <value>Sprachunabhängige Dokumente verlinken</value>
  </data>
  <data name="plSupportedLanguages.Help" xml:space="preserve">
    <value>Codes nach ISO 921.1 der unterstützten Kulturen</value>
  </data>
  <data name="plSupportedLanguages.Text" xml:space="preserve">
    <value>Unterstützte Kulturen</value>
  </data>
  <data name="plDownloadTarget.Help" xml:space="preserve">
    <value>Ziel für Link (z.B. _blank)</value>
  </data>
  <data name="plDownloadTarget.Text" xml:space="preserve">
    <value>Ziel für Link (z.B. _blank)</value>
  </data>
  <data name="plSupportedExtensions.Help" xml:space="preserve">
    <value>Eine durch Komma getrennte Liste der Unterstützten Dateitypen.
Dieses Feld kann leergelassen werden, wenn alle möglichen Erweiterungen unterstütz werden. (Dynamisch Generierung)
Die Liste bestimmt auch die Anordnung der Symbole bei gewählter Option Gruppierung nach Datetyp.
Bsp: .xlsx,.docx</value>
  </data>
  <data name="plSupportedExtensions.Text" xml:space="preserve">
    <value>Unterstützte Dateitypen (z.B. .pdf, .zip, .rar)</value>
  </data>
  <data name="plSuspendDate.Help" xml:space="preserve">
    <value>Ein vorhandenes Datum am Anfang eines Titels wird unterdrückt.</value>
  </data>
  <data name="plSuspendDate.Text" xml:space="preserve">
    <value>Datum unterdrücken</value>
  </data>
  <data name="plSuspendUnderlines.Help" xml:space="preserve">
    <value>Unterstriche im Titel werden (_) unterdrückt</value>
  </data>
  <data name="plSuspendUnderlines.Text" xml:space="preserve">
    <value>Unterstriche (_) unterdrücken</value>
  </data>
  <data name="plUseEncoding.Help" xml:space="preserve">
    <value>Bei der Verwendung eines virtuellen Verzeichnisses, wird die Url Encodiert. Deaktivieren sie diese Option, wenn sie die Website Offline z.B. auf einem Datenträge zur Verfügung stellen möchten.</value>
  </data>
  <data name="plUseEncoding.Text" xml:space="preserve">
    <value>Url Encodieren</value>
  </data>
  <data name="plLayoutType1.Help" xml:space="preserve">
    <value>Der Titel des Downloads befindet sich jeweils links vom Icon</value>
  </data>
  <data name="plLayoutType1.Text" xml:space="preserve">
    <value>Layout: Titel - Icon</value>
  </data>
  <data name="plLayoutType2.Help" xml:space="preserve">
    <value>Der Titel des Downloads befindet sich jeweils rechts vom Icon</value>
  </data>
  <data name="plLayoutType2.Text" xml:space="preserve">
    <value>Layout: Icon - Titel</value>
  </data>
  <data name="LayoutTypeIconTitle" xml:space="preserve">
    <value>Icon - Titel</value>
  </data>
  <data name="LayoutTypeTitleIcon" xml:space="preserve">
    <value>Titel - Icon</value>
  </data>
  <data name="OpenLevelClosed" xml:space="preserve">
    <value>Alle Ebenen geschlossen</value>
  </data>
  <data name="OpenLevelOpenAll" xml:space="preserve">
    <value>Alle Ebenen geöffnet</value>
  </data>
  <data name="OpenLevelOpenFirst" xml:space="preserve">
    <value>Erste Ebenen geöffnet</value>
  </data>
  <data name="plLayoutType.Help" xml:space="preserve">
    <value>Bestimmt die Anordnung des Titles zum Icon. Der Titel des Downloads befindet sich jeweils links oder rechts vom Icon.</value>
  </data>
  <data name="plLayoutType.Text" xml:space="preserve">
    <value>Anordnung für Titel und Icon</value>
  </data>
  <data name="plOpenLevel.Help" xml:space="preserve">
    <value>Bestimmt die geöffnete Ebene beim ersten aufruf des Moduls</value>
  </data>
  <data name="plOpenLevel.Text" xml:space="preserve">
    <value>Ebenen Option</value>
  </data>
  <data name="plRequestType.Help" xml:space="preserve">
    <value>Der Download kann über ein virtuelles Verzeichniss gemappt werden. Dazu muss auf dem IIS ein virtuelles Verzeichniss angelegt werden.
Beim Http-Stream wird für die Datei Http-Stream generiert. Ein Virtuelles Verzeichniss wird nicht benötigt.</value>
  </data>
  <data name="plRequestType.Text" xml:space="preserve">
    <value>Mapping-Zuordnung</value>
  </data>
  <data name="plType.Help" xml:space="preserve">
    <value>Die Dateien können aufgrund der Ländersuffix gruppiert werden, oder anhand ihrer Dateierweiterung.
Für den Gruppierungstyp Dateierweiterung wird für jeden unterstützten Dateityp in der Gruppe, dessen Datei nicht exisitiert, das Platzhalter-Symbol (-.gif) verwendet.</value>
  </data>
  <data name="plType.Text" xml:space="preserve">
    <value>Gruppierung</value>
  </data>
  <data name="RequestTypeHttp.Text" xml:space="preserve">
    <value>Http-Stream</value>
  </data>
  <data name="RequestTypeVirtual.Text" xml:space="preserve">
    <value>Virtuelles Verzeichniss</value>
  </data>
  <data name="TypeExtension" xml:space="preserve">
    <value>Gruppieren nach Datei-Typ</value>
  </data>
  <data name="TypeLanguage" xml:space="preserve">
    <value>Gruppieren nach Sprachspezifikation</value>
  </data>
  <data name="TypeNone" xml:space="preserve">
    <value>Keine Gruppierung</value>
  </data>
</root>