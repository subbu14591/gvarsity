/************************************************************/
/*****                                                  *****/
/*****       SqlDataProvider                            *****/
/*****       Install/Upgrade for Events module 06.00.00 *****/
/*****                                                  *****/
/***** Note: To manually execute this script you must   *****/
/*****       perform a search AND replace operation     *****/
/*****       for {databaseOwner} AND {objectQualifier}  *****/
/*****       or use 'SQL' FROM Host Menu AND run this.  *****/
/*****                                                  *****/
/************************************************************/

/**** Change max length of detail URL                    ****/

ALTER TABLE {databaseOwner}[{objectQualifier}Events] ALTER COLUMN [DetailURL] NVARCHAR (200)
GO

ALTER TABLE {databaseOwner}[{objectQualifier}EventsRecurMaster] ALTER COLUMN [DetailURL] NVARCHAR (200)
GO

/**** Drop TimeZoneOffset - not used                     ****/

if exists (select * from information_schema.columns 
	where table_name = '{objectQualifier}Events' and column_name = 'TimeZoneOffset')
BEGIN
    ALTER TABLE {databaseOwner}[{objectQualifier}Events] DROP COLUMN TimeZoneOffset
END
GO

if exists (select * from information_schema.columns 
	where table_name = '{objectQualifier}EventsRecurMaster' and column_name = 'TimeZoneOffset')
BEGIN
    ALTER TABLE {databaseOwner}[{objectQualifier}EventsRecurMaster] DROP COLUMN TimeZoneOffset
END
GO

/***** Delete redundant SPROC                           *****/

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EventsTimeZoneUpgrade]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EventsTimeZoneUpgrade]
GO

/**** Drop EventTimeBegin - not used                     ****/

if exists (select * from information_schema.columns 
	where table_name = '{objectQualifier}EventsSignups' and column_name = 'EventTimeBegin')
BEGIN
    ALTER TABLE {databaseOwner}[{objectQualifier}EventsSignups] DROP COLUMN EventTimeBegin
END
GO

/***** Set Events.CreatedDate to UTC                     *****/

BEGIN
 EXEC sp_rename '{databaseOwner}[{objectQualifier}Events].CreatedDate', 'CreatedDateOld', 'COLUMN'
END
GO

ALTER TABLE {databaseOwner}[{objectQualifier}Events] ADD [CreatedDate] [datetime] NOT NULL DEFAULT (getutcdate())
GO

UPDATE {databaseOwner}[{objectQualifier}Events]
   SET CreatedDate = DATEADD(n, DATEDIFF(minute, GetDate(), GetUTCDate()),CreatedDateOld)
GO

DECLARE @defname VARCHAR(100), @cmd VARCHAR(1000)
    SET @defname = 
        (SELECT dc.name FROM sys.columns AS col 
          INNER JOIN sys.default_constraints AS dc ON col.default_object_id = dc.object_id 
         WHERE OBJECT_DEFINITION(default_object_id) IS NOT NULL 
           AND OBJECT_NAME(col.object_id) = '{objectQualifier}Events' and col.name = 'CreatedDateOld') 
    SET @cmd = 'ALTER TABLE {databaseOwner}[{objectQualifier}Events] DROP CONSTRAINT '+ @defname
EXEC(@cmd)

ALTER TABLE {databaseOwner}[{objectQualifier}Events] DROP COLUMN CreatedDateOld
GO

/***** Set EventsPPErrorLog.CreateDate to UTC            *****/

if exists (select * from sys.indexes where object_id = object_id(N'{databaseOwner}[{objectQualifier}EventsPPErrorLog]') AND name = N'IX_{objectQualifier}EventsPPErrorLog')
drop index [IX_{objectQualifier}EventsPPErrorLog] ON {databaseOwner}[{objectQualifier}EventsPPErrorLog]
GO

BEGIN
 EXEC sp_rename '{databaseOwner}[{objectQualifier}EventsPPErrorLog].CreateDate', 'CreateDateOld', 'COLUMN'
END
GO

ALTER TABLE {databaseOwner}[{objectQualifier}EventsPPErrorLog] ADD [CreateDate] [datetime] NOT NULL DEFAULT (getutcdate())
GO

UPDATE {databaseOwner}[{objectQualifier}EventsPPErrorLog]
   SET CreateDate = DATEADD(n, DATEDIFF(minute, GetDate(), GetUTCDate()),CreateDateOld)
GO

DECLARE @defname VARCHAR(100), @cmd VARCHAR(1000)
    SET @defname = 
        (SELECT dc.name FROM sys.columns AS col 
          INNER JOIN sys.default_constraints AS dc ON col.default_object_id = dc.object_id 
         WHERE OBJECT_DEFINITION(default_object_id) IS NOT NULL 
           AND OBJECT_NAME(col.object_id) = '{objectQualifier}EventsPPErrorLog' and col.name = 'CreateDateOld') 
    SET @cmd = 'ALTER TABLE {databaseOwner}[{objectQualifier}EventsPPErrorLog] DROP CONSTRAINT '+ @defname
EXEC(@cmd)

ALTER TABLE {databaseOwner}[{objectQualifier}EventsPPErrorLog] DROP COLUMN CreateDateOld
GO

CREATE  INDEX [IX_{objectQualifier}EventsPPErrorLog] ON {databaseOwner}[{objectQualifier}EventsPPErrorLog]([CreateDate] DESC ) ON [PRIMARY]
GO

/***** Set EventsSignups.CreateDate to UTC               *****/

BEGIN
 EXEC sp_rename '{databaseOwner}[{objectQualifier}EventsSignups].CreateDate', 'CreateDateOld', 'COLUMN'
END
GO

ALTER TABLE {databaseOwner}[{objectQualifier}EventsSignups] ADD [CreateDate] [datetime] NOT NULL DEFAULT (getutcdate())
GO

UPDATE {databaseOwner}[{objectQualifier}EventsSignups]
   SET CreateDate = DATEADD(n, DATEDIFF(minute, GetDate(), GetUTCDate()),CreateDateOld)
GO

DECLARE @defname VARCHAR(100), @cmd VARCHAR(1000)
    SET @defname = 
        (SELECT dc.name FROM sys.columns AS col 
          INNER JOIN sys.default_constraints AS dc ON col.default_object_id = dc.object_id 
         WHERE OBJECT_DEFINITION(default_object_id) IS NOT NULL 
           AND OBJECT_NAME(col.object_id) = '{objectQualifier}EventsSignups' and col.name = 'CreateDateOld') 
    SET @cmd = 'ALTER TABLE {databaseOwner}[{objectQualifier}EventsSignups] DROP CONSTRAINT '+ @defname
EXEC(@cmd)

ALTER TABLE {databaseOwner}[{objectQualifier}EventsSignups] DROP COLUMN CreateDateOld
GO

/***** Set EventsSignups.PayPalPaymentDate to UTC        *****/

UPDATE {databaseOwner}[{objectQualifier}EventsSignups]
   SET PayPalPaymentDate = DATEADD(n, DATEDIFF(minute, GetDate(), GetUTCDate()),PayPalPaymentDate)
GO

/***** Add EventTimeZoneId to EventsRecurMaster          *****/

if not exists (select * from information_schema.columns 
    where table_name = '{objectQualifier}EventsRecurMaster' and column_name = 'EventTimeZoneId')
BEGIN
    ALTER TABLE {databaseOwner}[{objectQualifier}EventsRecurMaster] WITH NOCHECK ADD 
        [EventTimeZoneId] [nvarchar] (100) NULL
END
GO

/************************************************************/
/************************************************************/
/*****                                                  *****/
/*****     Create Stored Procedures                     *****/
/*****                                                  *****/
/************************************************************/
/************************************************************/

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EventsSave]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EventsSave]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EventsGetByRange]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EventsGetByRange]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EventsGet]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EventsGet]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EventsGetRecurrences]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EventsGetRecurrences]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EventsRecurMasterGet]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EventsRecurMasterGet]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EventsRecurMasterSave]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EventsRecurMasterSave]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EventsNotificationsToSend]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EventsNotificationsToSend]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EventsCleanupExpired]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EventsCleanupExpired]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EventsSignupsGetEventRecurMaster]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EventsSignupsGetEventRecurMaster]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EventsSignupsGetUser]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EventsSignupsGetUser]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EventsSignupsGetEvent]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EventsSignupsGetEvent]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EventsSignupsGet]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EventsSignupsGet]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EventsSignupsMyEnrollments]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}{objectQualifier}EventsSignupsMyEnrollments
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EventsSignupsSave]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EventsSignupsSave]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EventsMasterAvailableModules]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EventsMasterAvailableModules]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EventsModerateEvents]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EventsModerateEvents]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EventsModerateSignups]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EventsModerateSignups]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EventsUpgrade]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EventsUpgrade]
GO

/* EventsSave */

CREATE PROCEDURE {databaseOwner}[{objectQualifier}EventsSave]
(
    @PortalID int,
    @EventID int,
    @RecurMasterID int,
    @ModuleID int,
    @EventTimeBegin datetime,
    @Duration int,
    @EventName nvarchar(100),
    @EventDesc ntext,
    @Importance int,
    @CreatedByID int,
    @Notify nvarchar(2048),
    @Approved bit,
    @Signups bit,
    @MaxEnrollment int,
    @EnrollRoleID int,
    @EnrollFee money, 
    @EnrollType varchar(10),
    @PayPalAccount nvarchar(100), 
    @Cancelled bit,
    @DetailPage bit,
    @DetailNewWin bit,
    @DetailURL nvarchar(200),
    @ImageURL nvarchar(100), 
    @ImageType varchar(1), 
    @ImageWidth int,
    @ImageHeight int,
    @ImageDisplay bit,
    @Location int,
    @Category int,
    @Reminder nvarchar(2048),
    @SendReminder bit,
    @ReminderTime int,
    @ReminderTimeMeasurement varchar(2),
    @ReminderFrom nvarchar(100),
    @SearchSubmitted bit,
    @CustomField1 nvarchar(100),
    @CustomField2 nvarchar(100),
    @EnrollListView bit,
    @DisplayEndDate bit,
    @AllDayEvent bit,
    @OwnerID int,
    @LastUpdatedID int,
    @OriginalDateBegin datetime,
    @NewEventEmailSent bit,
    @SaveOnly bit
)
AS
SET DATEFORMAT mdy
IF @Location = -1 
    Select @Location = Null

IF @Category = -1 
    Select @Category = Null

IF @EnrollRoleID = -1 
    Select @EnrollRoleID = Null

IF @ImageURL = N'' 
    Select @ImageURL = Null

IF @ImageType = '' 
    Select @ImageType = Null

IF @DetailURL = N'' 
    Select @DetailURL = Null

IF @EventID = -1 OR @EventID IS NULL
    INSERT {databaseOwner}[{objectQualifier}Events]
    (
        PortalID,
        RecurMasterID,
        ModuleID,
        EventTimeBegin,
        Duration,
        EventName,
        EventDesc,
        Importance,
        CreatedByID,
        Notify,
        Approved,
        Signups,
        MaxEnrollment,
        EnrollRoleID,
        EnrollFee, 
        EnrollType, 
        PayPalAccount, 
        Cancelled,
        DetailPage,
        DetailNewWin,
        DetailURL,
        ImageURL, 
        ImageType, 
        ImageWidth,
        ImageHeight,
        ImageDisplay,
        Location,
        Category,
        Reminder,
        SendReminder,
        ReminderTime,
        ReminderTimeMeasurement,
        ReminderFrom,
        SearchSubmitted,
        CustomField1,
        CustomField2,
        EnrollListView,
        DisplayEndDate,
        AllDayEvent,
        OwnerID,
        LastUpdatedAt,
        LastUpdatedID,
        OriginalDateBegin,
        NewEventEmailSent
    )
    VALUES
    (
        @PortalID,
        @RecurMasterID,
        @ModuleID,
        @EventTimeBegin,
        @Duration,
        @EventName,
        @EventDesc,
        @Importance,
        @CreatedByID,
        @Notify,
        @Approved,
        @Signups,
        @MaxEnrollment,
        @EnrollRoleID,
        @EnrollFee, 
        @EnrollType,
        @PayPalAccount, 
        @Cancelled,
        @DetailPage,
        @DetailNewWin,
        @DetailURL,
        @ImageURL, 
        @ImageType, 
        @ImageWidth,
        @ImageHeight,
        @ImageDisplay,
        @Location,
        @Category,
        @Reminder,
        @SendReminder,
        @ReminderTime,
        @ReminderTimeMeasurement,
        @ReminderFrom,
        @SearchSubmitted,
        @CustomField1,
        @CustomField2,
        @EnrollListView,
        @DisplayEndDate,
        @AllDayEvent,
        @OwnerID,
        GetUTCDate(),
        @LastUpdatedID,
        @OriginalDateBegin,
        @NewEventEmailSent
    )
ELSE
    UPDATE {databaseOwner}[{objectQualifier}Events] SET
        PortalID = @PortalID,
        RecurMasterID = @RecurMasterID,
        EventTimeBegin = @EventTimeBegin,
        Duration = @Duration,
        EventName = @EventName,
        EventDesc = @EventDesc,
        Importance = @Importance,
        Notify = @Notify,
        Approved = @Approved,
        Signups = @Signups,
        MaxEnrollment = @MaxEnrollment,
        EnrollRoleID = @EnrollRoleID,
        EnrollFee = @EnrollFee, 
        EnrollType = @EnrollType,
        PayPalAccount = @PayPalAccount, 
        Cancelled = @Cancelled,
        DetailPage = @DetailPage,
        DetailNewWin = @DetailNewWin,
        DetailURL = @DetailURL,
        ImageURL = @ImageURL, 
        ImageType = @ImageType, 
        ImageWidth = @ImageWidth,
        ImageHeight = @ImageHeight,
        ImageDisplay = @ImageDisplay,
        Location = @Location,
        Category = @Category,
        Reminder = @Reminder,
        SendReminder = @SendReminder,
        ReminderTime = @ReminderTime,
        ReminderTimeMeasurement = @ReminderTimeMeasurement,
        ReminderFrom = @ReminderFrom,
        SearchSubmitted = @SearchSubmitted,
        CustomField1 = @CustomField1,
        CustomField2 = @CustomField2,
        EnrollListView = @EnrollListView,
        DisplayEndDate = @DisplayEndDate,
        AllDayEvent = @AllDayEvent,
        OwnerID = @OwnerID,
        LastUpdatedAt = GetUTCDate(),
        LastUpdatedID = @LastUpdatedID,
        OriginalDateBegin = @OriginalDateBegin,
        NewEventEmailSent = @NewEventEmailSent
WHERE EventID = @EventID And ModuleID = @ModuleID

IF @SaveOnly = 0
SELECT E.PortalID, EventID, E.RecurMasterID, E.ModuleID, E.EventDateBegin, E.EventDateEnd,
    E.EventTimeBegin, E.Duration, E.EventName, E.EventDesc,
    E.Importance, E.CreatedDate, 
    CreatedBy = U.DisplayName,
    E.CreatedByID,
    E.Every,
    E.Period,
    E.RepeatType,
    E.Notify,
    E.Approved,
    E.Signups,
    E.MaxEnrollment,
    (Select count(*) from {databaseOwner}[{objectQualifier}EventsSignups] WHERE EventID = E.EventID and E.Signups = 1) as Enrolled,
    (Select count(*) from {databaseOwner}[{objectQualifier}Events] as E2 WHERE E2.RecurMasterID = E.RecurMasterID and E2.Cancelled = 0 and E2.Approved = 1) as NoOfRecurrences,
    (Select max(EventTimeBegin) from {databaseOwner}[{objectQualifier}Events] as E2 WHERE E2.RecurMasterID = E.RecurMasterID and E2.Cancelled = 0 and E2.Approved = 1) as LastRecurrence,
    E.EnrollRoleID,
    E.EnrollFee, 
    E.EnrollType, 
    E.PayPalAccount, 
    E.Cancelled,
    E.DetailPage,
    E.DetailNewWin,
    E.DetailURL,
    E.ImageURL, 
    E.ImageType, 
    E.ImageWidth,
    E.ImageHeight,
    E.ImageDisplay,
    c.Location,
    c.LocationName,
    c.MapURL,
    b.Category,
    b.CategoryName,
    b.Color,
    b.FontColor,
    E.Reminder,
    E.SendReminder,
    E.ReminderTime,
    E.ReminderTimeMeasurement,
    E.ReminderFrom,
    E.CustomField1,
    E.CustomField2,
    E.EnrollListView,
    E.DisplayEndDate,
    E.AllDayEvent,
    E.OwnerID,
    OwnerName = O.DisplayName,
    E.LastUpdatedAt,
    LastUpdatedBy = L.DisplayName,
    E.LastUpdatedID,
    r.RRULE,
    RMOwnerID = r.OwnerID,
    E.OriginalDateBegin,
    E.NewEventEmailSent,
    r.EventTimeZoneId
FROM {databaseOwner}[{objectQualifier}Events] E
inner join {databaseOwner}[{objectQualifier}EventsRecurMaster] AS r on E.RecurMasterID = r.RecurMasterID
left outer join {databaseOwner}[{objectQualifier}Users] U on E.CreatedByID = U.UserID
left outer join {databaseOwner}[{objectQualifier}Users] O on E.OwnerID = O.UserID
left outer join {databaseOwner}[{objectQualifier}Users] L on E.LastUpdatedID = L.UserID
left join {databaseOwner}[{objectQualifier}EventsCategory] b on E.Category = b.Category
left join {databaseOwner}[{objectQualifier}EventsLocation] c on E.Location = c.Location
WHERE EventID = scope_identity()
GO

/**** EventsGetByRange ****/

CREATE PROCEDURE {databaseOwner}[{objectQualifier}EventsGetByRange]
(
 @ModuleIDs nvarchar(1024),
 @BeginDate datetime,
 @EndDate datetime,
 @CategoryIDs nvarchar(1024)
)
AS

CREATE Table #EventIDs
    (EventID Int, NoOfRecurrences Int, LastRecurrence DateTime)

INSERT INTO #EventIDs (EventID, NoOfRecurrences, LastRecurrence) 
SELECT DISTINCT e.EventID, Count(E2.EventID) as NoOfRecurrences, Max(E2.EventTimeBegin) as LastRecurrence
 FROM {databaseOwner}[{objectQualifier}Events] E
 LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EventsMaster] M ON E.ModuleID = M.SubEventID 
 LEFT JOIN {databaseOwner}[{objectQualifier}Events] as E2 ON E.RecurMasterID = E2.RecurMasterID
 WHERE ((E.EventTimeBegin < DATEADD(DAY,1,@EndDate) AND DATEADD(minute,E.Duration,E.EventTimeBegin) >=  @BeginDate) OR 
   (E.EventTimeBegin >= @BeginDate AND E.EventTimeBegin < DATEADD(DAY,1, @EndDate))) 
   AND E.Approved = 1
   AND E.Cancelled = 0
   AND (E.ModuleID in (SELECT * FROM {databaseOwner}[{objectQualifier}SplitIDs](@ModuleIDs)))
GROUP By E.EventID

SELECT E.PortalID, E.EventID, E.RecurMasterID, E.ModuleID, E.EventDateBegin, E.EventDateEnd,
 E.EventTimeBegin, E.Duration, E.EventName, E.EventDesc,
 E.Importance, E.CreatedDate, 
 CreatedBy = U.DisplayName, 
 E.CreatedByID, 
 E.Every, 
 E.Period, 
 E.RepeatType, 
 E.Notify, 
 E.approved, 
 E.Signups, 
 E.MaxEnrollment, 
 (Select Sum(NoEnrolees) from {databaseOwner}[{objectQualifier}EventsSignups] WHERE EventID = E.EventID and E.Signups = 1) as Enrolled, 
 ET.NoOfRecurrences,
 ET.LastRecurrence,
 E.EnrollRoleID, 
 E.EnrollFee, 
 E.EnrollType,
 E.PayPalAccount, 
 E.Cancelled, 
 E.DetailPage, 
 E.DetailNewWin, 
 E.DetailURL, 
 E.ImageURL, 
 E.ImageType, 
 E.ImageWidth, 
 E.ImageHeight, 
 E.ImageDisplay, 
 E.Location, 
 c.LocationName, 
 c.MapURL, 
 E.Category, 
 b.CategoryName, 
 b.Color, 
 b.FontColor, 
 E.Reminder, 
 E.SendReminder, 
 E.ReminderTime, 
 E.ReminderTimeMeasurement, 
 E.ReminderFrom, 
 E.SearchSubmitted, 
 E.CustomField1,
 E.CustomField2, 
 E.EnrollListView, 
 E.DisplayEndDate, 
 E.AllDayEvent, 
 E.OwnerID, 
 OwnerName = O.DisplayName, 
 E.LastUpdatedAt, 
 LastUpdatedBy = L.DisplayName, 
 E.LastUpdatedID, 
 RMOwnerID = r.OwnerID, 
 r.RRULE, 
 E.OriginalDateBegin, 
 E.NewEventEmailSent,
 r.EventTimeZoneId 
 FROM {databaseOwner}[{objectQualifier}Events] E 
 inner join {databaseOwner}[{objectQualifier}EventsRecurMaster] AS r on E.RecurMasterID = r.RecurMasterID 
 left outer join {databaseOwner}[{objectQualifier}Users] U on E.CreatedByID = U.UserID 
 left outer join {databaseOwner}[{objectQualifier}Users] O on E.OwnerID = O.UserID 
 left outer join {databaseOwner}[{objectQualifier}Users] L on E.LastUpdatedID = L.UserID 
 left join {databaseOwner}[{objectQualifier}EventsCategory] b on E.Category = b.Category 
 left join {databaseOwner}[{objectQualifier}EventsLocation] c on E.Location = c.Location 
 left join #EventIDs ET on E.EventID = ET.EventID
WHERE E.EventID in (Select EventID from #EventIDs)
   AND (e.Category in (SELECT * FROM {databaseOwner}[{objectQualifier}SplitIDs](@CategoryIDs)) or @CategoryIDs = '-1')
GO

/**** EventsGet ****/

CREATE PROCEDURE {databaseOwner}[{objectQualifier}EventsGet]
(
    @EventID int,
    @ModuleID int
)
AS
SET DATEFORMAT mdy

CREATE Table #RealModuleID
    (EventID Int,
     ModuleID Int)


Insert into #RealModuleID (EventID, ModuleID) Select distinct e.EventID, e.ModuleID
            From {databaseOwner}[{objectQualifier}Events] e
            left outer join {databaseOwner}[{objectQualifier}EventsMaster] m ON e.ModuleID = m.SubEventID 
            WHERE EventID = @EventID  
            And (e.ModuleID =  @ModuleID Or m.ModuleID = @ModuleID)

SELECT E.PortalID, E.EventID, E.RecurMasterID, E.ModuleID, E.EventDateBegin, E.EventDateEnd,
    E.EventTimeBegin, E.Duration, E.EventName, E.EventDesc,
    E.Importance, E.CreatedDate, 
    CreatedBy = u.DisplayName,
    E.CreatedByID,
    E.Every,
    E.Period,
    E.RepeatType,
    E.Notify,
    E.Approved,
    E.Signups,
    E.MaxEnrollment,
    (Select Sum(NoEnrolees) from {databaseOwner}[{objectQualifier}EventsSignups] WHERE EventID = E.EventID and E.Signups = 1) as Enrolled,
    (Select count(*) from {databaseOwner}[{objectQualifier}Events] as E2 WHERE E2.RecurMasterID = E.RecurMasterID and E2.Cancelled = 0 and E2.Approved = 1) as NoOfRecurrences,
    (Select max(EventTimeBegin) from {databaseOwner}[{objectQualifier}Events] as E2 WHERE E2.RecurMasterID = E.RecurMasterID and E2.Cancelled = 0 and E2.Approved = 1) as LastRecurrence,
    E.EnrollRoleID,
    E.EnrollFee, 
    E.EnrollType, 
    E.PayPalAccount, 
    E.Cancelled,
    E.DetailPage,
    E.DetailNewWin,
    E.DetailURL,
    E.ImageURL, 
    E.ImageType, 
    E.ImageWidth,
    E.ImageHeight,
    E.ImageDisplay,
    E.Location,
    c.LocationName,
    c.MapURL,
    E.Category,
    b.CategoryName,
    b.Color,
    b.FontColor,
    E.Reminder,
    E.SendReminder,
    E.ReminderTime,
    E.ReminderTimeMeasurement,
    E.ReminderFrom,
    E.SearchSubmitted,
    E.CustomField1,
    E.CustomField2,
    E.EnrollListView,
    E.DisplayEndDate,
    E.AllDayEvent,
    E.OwnerID,
    OwnerName = O.DisplayName,
    E.LastUpdatedAt,
    LastUpdatedBy = L.DisplayName,
    E.LastUpdatedID,
    r.RRULE, 
    RMOwnerID = r.OwnerID,
    E.OriginalDateBegin,
    E.NewEventEmailSent,
    r.EventTimeZoneId
FROM {databaseOwner}[{objectQualifier}Events] E
inner join {databaseOwner}[{objectQualifier}EventsRecurMaster] AS r on E.RecurMasterID = r.RecurMasterID
left outer join {databaseOwner}[{objectQualifier}Users] U on E.CreatedByID = U.UserID
left outer join {databaseOwner}[{objectQualifier}Users] O on E.OwnerID = O.UserID
left outer join {databaseOwner}[{objectQualifier}Users] L on E.LastUpdatedID = L.UserID
left join {databaseOwner}[{objectQualifier}EventsCategory] b on E.Category = b.Category
left join {databaseOwner}[{objectQualifier}EventsLocation] c on E.Location = c.Location
WHERE EventID = @EventID And e.ModuleID = (Select ModuleID from #RealModuleID where EventID = @EventID)
GO

/*** EventsGetRecurrences ***/

CREATE PROCEDURE {databaseOwner}[{objectQualifier}EventsGetRecurrences]
(
    @RecurMasterID int,
    @ModuleID int
)
AS
 SELECT E.PortalID, EventID, E.RecurMasterID, E.ModuleID, E.EventDateBegin, E.EventDateEnd,
    E.EventTimeBegin, E.Duration, E.EventName, E.EventDesc,
    E.Importance, E.CreatedDate, 
    CreatedBy = U.DisplayName,
    E.CreatedByID,
    E.Every,
    E.Period,
    E.RepeatType,
    E.Notify,
    E.Approved,
    E.Signups,
    E.MaxEnrollment,
    (Select count(*) from {databaseOwner}[{objectQualifier}EventsSignups] WHERE EventID = E.EventID and E.Signups = 1) as Enrolled,
    E.EnrollRoleID,
    E.EnrollFee, 
    E.EnrollType, 
    E.PayPalAccount, 
    E.Cancelled,
    E.DetailPage,
    E.DetailNewWin,
    E.DetailURL,
    E.ImageURL, 
    E.ImageType, 
    E.ImageWidth,
    E.ImageHeight,
    E.ImageDisplay,
    E.Location,
    c.LocationName,
    c.MapURL,
    E.Category,
    b.CategoryName,
    b.Color,
    b.FontColor, 
    E.Reminder,
    E.SendReminder,
    E.ReminderTime,
    E.ReminderTimeMeasurement,
    E.ReminderFrom,
    E.SearchSubmitted,
    E.CustomField1,
    E.CustomField2,
    E.EnrollListView,
    E.DisplayEndDate,
    E.AllDayEvent,
    E.OwnerID,
    OwnerName = O.DisplayName,
    E.LastUpdatedAt,
    LastUpdatedBy = L.DisplayName,
    E.LastUpdatedID,
    E.OriginalDateBegin,
    E.NewEventEmailSent,
    r.EventTimeZoneId 
  FROM {databaseOwner}[{objectQualifier}Events] E
  inner join {databaseOwner}[{objectQualifier}EventsRecurMaster] AS r on E.RecurMasterID = r.RecurMasterID
  left outer join {databaseOwner}[{objectQualifier}Users] U on E.CreatedByID = U.UserID
  left outer join {databaseOwner}[{objectQualifier}Users] O on E.OwnerID = O.UserID
  left outer join {databaseOwner}[{objectQualifier}Users] L on E.LastUpdatedID = L.UserID
  left join {databaseOwner}[{objectQualifier}EventsCategory] b on E.Category = b.Category
  left join {databaseOwner}[{objectQualifier}EventsLocation] c on E.Location = c.Location
  WHERE (E.RecurMasterID = @RecurMasterID AND E.ModuleID = @ModuleID) 
  ORDER BY E.EventTimeBegin, E.EventDateEnd
GO

/* EventsRecurMasterGet */

CREATE PROCEDURE {databaseOwner}[{objectQualifier}EventsRecurMasterGet]
(
    @RecurMasterID int,
    @ModuleID int
)
AS

SELECT 	RecurMasterID, 
    ModuleID, 
    PortalID,
    RRULE, 
    DTSTART,
    Duration,
    Until,
    EventName, 
    EventDesc,
    Importance,
    Notify,
    Approved,
    Signups,
    MaxEnrollment,
    (SELECT Sum(NoEnrolees) FROM {databaseOwner}[{objectQualifier}Events] AS E INNER JOIN {databaseOwner}[{objectQualifier}EventsSignups] AS S ON E.EventID = S.EventID WHERE E.RecurMasterID = R.RecurMasterID and E.Signups = 1) as Enrolled,
    EnrollRoleID,
    EnrollFee, 
    EnrollType, 
    PayPalAccount, 
    DetailPage,
    DetailNewWin,
    DetailURL,
    ImageURL, 
    ImageType, 
    ImageWidth,
    ImageHeight,
    ImageDisplay,
    Location,
    Category,
    Reminder,
    SendReminder,
    ReminderTime,
    ReminderTimeMeasurement,
    ReminderFrom,
    CustomField1,
    CustomField2,
    EnrollListView,
    DisplayEndDate,
    AllDayEvent,
    CultureName,
    OwnerID,
    CreatedByID,
    CreatedDate,
    UpdatedByID,
    UpdatedDate,
    EventTimeZoneId
FROM {databaseOwner}[{objectQualifier}EventsRecurMaster] R
WHERE RecurMasterID = @RecurMasterID 
  AND ModuleID = @ModuleID
GO

/* EventsRecurMasterSave */

CREATE PROCEDURE {databaseOwner}[{objectQualifier}EventsRecurMasterSave]
(
    @RecurMasterID int,
    @ModuleID int,
    @PortalID int,
    @RRULE nvarchar(1000),
    @DTSTART datetime,
    @Duration nvarchar(50),
    @Until datetime,
    @EventName nvarchar(100),
    @EventDesc ntext,
    @Importance int,
    @Notify nvarchar(2048),
    @Approved bit,
    @Signups bit,
    @MaxEnrollment int,
    @EnrollRoleID int,
    @EnrollFee money, 
    @EnrollType varchar(10),
    @PayPalAccount nvarchar(100), 
    @DetailPage bit,
    @DetailNewWin bit,
    @DetailURL nvarchar(200),
    @ImageURL nvarchar(100), 
    @ImageType varchar(1), 
    @ImageWidth int,
    @ImageHeight int,
    @ImageDisplay bit,
    @Location int,
    @Category int,
    @Reminder nvarchar(2048),
    @SendReminder bit,
    @ReminderTime int,
    @ReminderTimeMeasurement varchar(2),
    @ReminderFrom nvarchar(100),
    @CustomField1 nvarchar(100),
    @CustomField2 nvarchar(100),
    @EnrollListView bit,
    @DisplayEndDate bit,
    @AllDayEvent bit,
    @CultureName varchar(10),
    @OwnerID int,
    @CreatedByID int,
    @UpdatedByID int,
    @EventTimeZoneId nvarchar(100)
)
AS
SET DATEFORMAT mdy
IF @Location = -1 
    Select @Location = Null

IF @Category = -1 
    Select @Category = Null

IF @EnrollRoleID = -1 
    Select @EnrollRoleID = Null

IF @ImageURL = N'' 
    Select @ImageURL = Null

IF @ImageType = '' 
    Select @ImageType = Null

IF @DetailURL = N'' 
    Select @DetailURL = Null

IF @RecurMasterID = -1 OR @recurMasterID IS NULL
    INSERT {databaseOwner}[{objectQualifier}EventsRecurMaster]
    (
        ModuleID,
        PortalID,
        RRULE,
        DTSTART,
        Duration,
        Until,
        EventName,
        EventDesc,
        Importance,
        Notify,
        Approved,
        Signups,
        MaxEnrollment,
        EnrollRoleID,
        EnrollFee, 
        EnrollType, 
        PayPalAccount, 
        DetailPage,
        DetailNewWin,
        DetailURL,
        ImageURL, 
        ImageType, 
        ImageWidth,
        ImageHeight,
        ImageDisplay,
        Location,
        Category,
        Reminder,
        SendReminder,
        ReminderTime,
        ReminderTimeMeasurement,
        ReminderFrom,
        CustomField1,
        CustomField2,
        EnrollListView,
        DisplayEndDate,
        AllDayEvent,
        CultureName,
        OwnerID,
        CreatedByID,
        CreatedDate,
        UpdatedByID,
        UpdatedDate,
        EventTimeZoneId
    )
    VALUES
    (
        @ModuleID,
        @PortalID,
        @RRULE,
        @DTSTART,
        @Duration,
        @Until,
        @EventName,
        @EventDesc,
        @Importance,
        @Notify,
        @Approved,
        @Signups,
        @MaxEnrollment,
        @EnrollRoleID,
        @EnrollFee, 
        @EnrollType,
        @PayPalAccount, 
        @DetailPage,
        @DetailNewWin,
        @DetailURL,
        @ImageURL, 
        @ImageType, 
        @ImageWidth,
        @ImageHeight,
        @ImageDisplay,
        @Location,
        @Category,
        @Reminder,
        @SendReminder,
        @ReminderTime,
        @ReminderTimeMeasurement,
        @ReminderFrom,
        @CustomField1,
        @CustomField2,
        @EnrollListView,
        @DisplayEndDate,
        @AllDayEvent,
        @CultureName,
        @OwnerID,
        @CreatedByID,
        GetUTCDate(),
        @UpdatedByID,
        GetUTCDate(),
        @EventTimeZoneId
    )
ELSE
    UPDATE {databaseOwner}[{objectQualifier}EventsRecurMaster] SET
        RRULE = @RRULE,
        DTSTART = @DTSTART,
        Duration = @Duration,
        Until = @Until,
        EventName = @EventName,
        EventDesc = @EventDesc,
        Importance = @Importance,
        Notify = @Notify,
        Approved = @Approved,
        Signups = @Signups,
        MaxEnrollment = @MaxEnrollment,
        EnrollRoleID = @EnrollRoleID,
        EnrollFee = @EnrollFee, 
        EnrollType = @EnrollType,
        PayPalAccount = @PayPalAccount, 
        DetailPage = @DetailPage,
        DetailNewWin = @DetailNewWin,
        DetailURL = @DetailURL,
        ImageURL = @ImageURL, 
        ImageType = @ImageType, 
        ImageWidth = @ImageWidth,
        ImageHeight = @ImageHeight,
        ImageDisplay = @ImageDisplay,
        Location = @Location,
        Category = @Category,
        Reminder = @Reminder,
        SendReminder = @SendReminder,
        ReminderTime = @ReminderTime,
        ReminderTimeMeasurement = @ReminderTimeMeasurement,
        ReminderFrom = @ReminderFrom,
        CustomField1 = @CustomField1,
        CustomField2 = @CustomField2,
        EnrollListView = @EnrollListView,
        DisplayEndDate = @DisplayEndDate,
        AllDayEvent = @AllDayEvent,
        CultureName = @CultureName,
        OwnerID = @OwnerID,
        UpdatedByID = @UpdatedByID,
        UpdatedDate = GetUTCDate(),
        EventTimeZoneId = @EventTimeZoneId
WHERE RecurMasterID = @RecurMasterID And ModuleID = @ModuleID
      
SELECT 	RecurMasterID, 
    ModuleID, 
    PortalID,
    RRULE, 
    DTSTART,
    Duration,
    Until,
    EventName, 
    EventDesc,
    Importance,
    Notify,
    Approved,
    Signups,
    MaxEnrollment,
    (SELECT COUNT(*) FROM {databaseOwner}[{objectQualifier}Events] AS E INNER JOIN {databaseOwner}[{objectQualifier}EventsSignups] AS S ON E.EventID = S.EventID WHERE E.RecurMasterID = R.RecurMasterID and E.Signups = 1) as Enrolled,
    EnrollRoleID,
    EnrollFee, 
    EnrollType, 
    PayPalAccount, 
    DetailPage,
    DetailNewWin,
    DetailURL, 		
    ImageURL, 
    ImageType, 
    ImageWidth,
    ImageHeight,
    ImageDisplay,
    Location,
    Category,
    Reminder,
    SendReminder,
    ReminderTime,
    ReminderTimeMeasurement,
    ReminderFrom,
    CustomField1,
    CustomField2,
    EnrollListView,
    DisplayEndDate,
    AllDayEvent,
    CultureName,
    OwnerID,
    CreatedByID,
    CreatedDate,
    UpdatedByID,
    UpdatedDate,
    EventTimeZoneId
FROM {databaseOwner}[{objectQualifier}EventsRecurMaster] R
WHERE RecurMasterID = scope_identity() or RecurMasterID = @RecurMasterID
GO

/*** EventsNotificationToSend ***/

CREATE PROCEDURE {databaseOwner}{objectQualifier}EventsNotificationsToSend
(
    @NotifyTime DateTime
)
AS
SELECT     n.NotificationID, n.EventID, n.PortalAliasID, n.UserEmail, 
                      n.NotificationSent, n.NotifyByDateTime, n.EventTimeBegin, n.NotifyLanguage, 
                      n.ModuleID, n.TabID
FROM         {databaseOwner}[{objectQualifier}EventsNotification] as n 
WHERE     (n.NotificationSent = 0 and n.NotifyByDateTime < @NotifyTime)
ORDER BY n.NotifyByDateTime
GO

/*** EventsCleanupExpired ***/

CREATE PROCEDURE {databaseOwner}{objectQualifier}EventsCleanupExpired
(
    @PortalID int,
    @ModuleID int
)
AS

DELETE {databaseOwner}{objectQualifier}EventsRecurMaster 
    WHERE PortalID = @PortalID AND
      ModuleID = @ModuleID AND
      0 = (SELECT count(EventID) FROM {databaseOwner}{objectQualifier}Events
          WHERE {databaseOwner}{objectQualifier}Events.RecurMasterID = {databaseOwner}{objectQualifier}EventsRecurMaster.RecurMasterID 
            AND {databaseOwner}{objectQualifier}Events.Cancelled = 0)
GO

/*** EventsSignupsGetEventRecurMaster ***/

CREATE PROCEDURE {databaseOwner}{objectQualifier}EventsSignupsGetEventRecurMaster
(
    @RecurMasterID int,
    @ModuleID int
)
AS
SET DATEFORMAT mdy

Select Distinct s.EventID, s.SignupID, s.ModuleID, s.Userid, s.Approved,
  --u.FirstName + ' ' + u.LastName as UserName,
  u.DisplayName as UserName, u.Email,
  c.EventTimeBegin,c.Duration,c.EventName,c.Importance,c.Approved as EventApproved,
  c.MaxEnrollment,
  (Select Sum(NoEnrolees) from {databaseOwner}{objectQualifier}EventsSignups WHERE EventID = c.EventID and c.Signups = 1) as Enrolled,
        PayPalStatus, 
        PayPalReason, 
        PayPalTransID, 
        PayPalPayerID, 
        PayPalPayerStatus, 
        PayPalRecieverEmail, 
        PayPalUserEmail,
        PayPalPayerEmail, 
        PayPalFirstName, 
        PayPalLastName, 
        PayPalAddress, 
        PayPalCity, 
        PayPalState, 
        PayPalZip, 
        PayPalCountry, 
        PayPalCurrency, 
        PayPalPaymentDate, 
        PayPalAmount, 
        PayPalFee,
        NoEnrolees,
        r.EventTimeZoneId
FROM {databaseOwner}{objectQualifier}EventsRecurMaster AS r RIGHT OUTER JOIN
     {databaseOwner}{objectQualifier}Events AS c ON r.RecurMasterID = c.RecurMasterID RIGHT OUTER JOIN
     {databaseOwner}{objectQualifier}EventsSignups AS s LEFT OUTER JOIN
     {databaseOwner}{objectQualifier}Users AS u ON s.UserID = u.UserID ON c.EventID = s.EventID LEFT OUTER JOIN
     {databaseOwner}{objectQualifier}EventsMaster AS m ON s.ModuleID = m.SubEventID
Where  r.RecurMasterID = @RecurMasterID And
       (s.ModuleID = @ModuleID Or m.ModuleID = @ModuleID)
ORDER BY c.EventTimeBegin, c.EventName, UserName
GO

/*** EventsSignupsGetUser ***/

CREATE PROCEDURE {databaseOwner}{objectQualifier}EventsSignupsGetUser
(
    @EventID int,
    @UserID int,
    @ModuleID int
)
AS
SET DATEFORMAT mdy
Select Distinct s.EventID, s.SignupID, s.ModuleID, s.Userid, s.Approved,
  -- u.FirstName + ' ' + u.LastName as UserName,
  u.DisplayName as USerName, u.Email,
 c.EventTimeBegin,c.Duration,c.EventName,c.Importance,c.Approved as EventApproved,
  c.MaxEnrollment,
  (Select Sum(NoEnrolees) from {databaseOwner}{objectQualifier}EventsSignups WHERE EventID = c.EventID and c.Signups = 1) as Enrolled,
        PayPalStatus, 
        PayPalReason, 
        PayPalTransID, 
        PayPalPayerID, 
        PayPalPayerStatus, 
        PayPalRecieverEmail, 
        PayPalUserEmail,
        PayPalPayerEmail, 
        PayPalFirstName, 
        PayPalLastName, 
        PayPalAddress, 
        PayPalCity, 
        PayPalState, 
        PayPalZip, 
        PayPalCountry, 
        PayPalCurrency, 
        PayPalPaymentDate, 
        PayPalAmount, 
        PayPalFee,
        NoEnrolees,
        r.EventTimeZoneId
FROM {databaseOwner}{objectQualifier}EventsRecurMaster AS r RIGHT OUTER JOIN
     {databaseOwner}{objectQualifier}Events AS c ON r.RecurMasterID = c.RecurMasterID RIGHT OUTER JOIN
     {databaseOwner}{objectQualifier}EventsSignups AS s LEFT OUTER JOIN
     {databaseOwner}{objectQualifier}Users AS u ON s.UserID = u.UserID ON c.EventID = s.EventID LEFT OUTER JOIN
     {databaseOwner}{objectQualifier}EventsMaster AS m ON s.ModuleID = m.SubEventID
Where  s.EventID = @EventID And
             s.Userid = @UserID And
             (s.ModuleID = @ModuleID Or m.ModuleID = @ModuleID)
GO

/*** EventsSignupsGet ***/

CREATE PROCEDURE {databaseOwner}{objectQualifier}EventsSignupsGet
(
    @SignupID int,
    @ModuleID int,
    @PPIPN bit
)
AS
SET DATEFORMAT mdy
Select Distinct s.EventID, s.SignupID, s.ModuleID, s.Userid, s.Approved,
  --u.FirstName + ' ' + u.LastName as UserName,#
  u.DisplayName as UserName, u.Email,
  c.EventTimeBegin,c.Duration,c.EventName,c.Importance,c.Approved as EventApproved,
  c.MaxEnrollment,
  (Select Sum(NoEnrolees) from {databaseOwner}{objectQualifier}EventsSignups WHERE EventID = c.EventID and c.Signups = 1) as Enrolled,
        PayPalStatus, 
        PayPalReason, 
        PayPalTransID, 
        PayPalPayerID, 
        PayPalPayerStatus, 
        PayPalRecieverEmail, 
        PayPalUserEmail,
        PayPalPayerEmail, 
        PayPalFirstName, 
        PayPalLastName, 
        PayPalAddress, 
        PayPalCity, 
        PayPalState, 
        PayPalZip, 
        PayPalCountry, 
        PayPalCurrency, 
        PayPalPaymentDate, 
        PayPalAmount, 
        PayPalFee,
        NoEnrolees,
        r.EventTimeZoneId
FROM {databaseOwner}{objectQualifier}EventsRecurMaster AS r RIGHT OUTER JOIN
     {databaseOwner}{objectQualifier}Events AS c ON r.RecurMasterID = c.RecurMasterID RIGHT OUTER JOIN
     {databaseOwner}{objectQualifier}EventsSignups AS s LEFT OUTER JOIN
     {databaseOwner}{objectQualifier}Users AS u ON s.UserID = u.UserID ON c.EventID = s.EventID LEFT OUTER JOIN
     {databaseOwner}{objectQualifier}EventsMaster AS m ON s.ModuleID = m.SubEventID
Where  s.SignupID = @SignupID And
       (s.ModuleID = @ModuleID Or m.ModuleID = @ModuleID Or @PPIPN <> 0)
GO

/*** EventsSignupsGetEvent ***/

CREATE PROCEDURE {databaseOwner}{objectQualifier}EventsSignupsGetEvent
(
    @EventID int,
    @ModuleID int
)
AS
SET DATEFORMAT mdy
Select Distinct s.EventID, s.SignupID, s.ModuleID, s.Userid, s.Approved,
  --u.FirstName + ' ' + u.LastName as UserName,
  u.DisplayName as UserName, u.Email,
  c.EventTimeBegin,c.Duration,c.EventName,c.Importance,c.Approved as EventApproved,
  c.MaxEnrollment,
  (Select Sum(NoEnrolees) from {databaseOwner}{objectQualifier}EventsSignups WHERE EventID = c.EventID and c.Signups = 1) as Enrolled,
        PayPalStatus, 
        PayPalReason, 
        PayPalTransID, 
        PayPalPayerID, 
        PayPalPayerStatus, 
        PayPalRecieverEmail, 
        PayPalUserEmail,
        PayPalPayerEmail, 
        PayPalFirstName, 
        PayPalLastName, 
        PayPalAddress, 
        PayPalCity, 
        PayPalState, 
        PayPalZip, 
        PayPalCountry, 
        PayPalCurrency, 
        PayPalPaymentDate, 
        PayPalAmount, 
        PayPalFee,
        NoEnrolees,
        r.EventTimeZoneId
FROM {databaseOwner}{objectQualifier}EventsRecurMaster AS r RIGHT OUTER JOIN
     {databaseOwner}{objectQualifier}Events AS c ON r.RecurMasterID = c.RecurMasterID RIGHT OUTER JOIN
     {databaseOwner}{objectQualifier}EventsSignups AS s LEFT OUTER JOIN
     {databaseOwner}{objectQualifier}Users AS u ON s.UserID = u.UserID ON c.EventID = s.EventID LEFT OUTER JOIN
     {databaseOwner}{objectQualifier}EventsMaster AS m ON s.ModuleID = m.SubEventID
Where  s.EventID = @EventID And
       (s.ModuleID = @ModuleID Or m.ModuleID = @ModuleID)
ORDER BY c.EventTimeBegin, c.EventName, UserName
GO

/*** EventsSignupsSave ***/

CREATE PROCEDURE {databaseOwner}[{objectQualifier}EventsSignupsSave]
(
    @EventID int, 
    @SignupID int, 
    @ModuleID int, 
    @UserID int,
    @Approved int,
    @PayPalStatus nvarchar(50), 
    @PayPalReason nvarchar(100), 
    @PayPalTransID nvarchar(50), 
    @PayPalPayerID nvarchar(50), 
    @PayPalPayerStatus nvarchar(50), 
    @PayPalRecieverEmail nvarchar(100), 
    @PayPalUserEmail nvarchar(100), 
    @PayPalPayerEmail nvarchar(100), 
    @PayPalFirstName nvarchar(50), 
    @PayPalLastName nvarchar(50), 
    @PayPalAddress nvarchar(100), 
    @PayPalCity nvarchar(25), 
    @PayPalState nvarchar(25), 
    @PayPalZip nvarchar(25), 
    @PayPalCountry nvarchar(25), 
    @PayPalCurrency nvarchar(25), 
    @PayPalPaymentDate datetime , 
    @PayPalAmount money, 
    @PayPalFee money,
    @NoEnrolees int
)
AS
SET DATEFORMAT mdy
IF @SignupID = 0 OR @SignupID IS NULL
    INSERT {databaseOwner}[{objectQualifier}EventsSignups]
    (
        EventID,
        ModuleID,
        UserID,
        Approved,
        PayPalStatus, 
        PayPalReason, 
        PayPalTransID, 
        PayPalPayerID, 
        PayPalPayerStatus, 
        PayPalRecieverEmail, 
        PayPalUserEmail,
        PayPalPayerEmail, 
        PayPalFirstName, 
        PayPalLastName, 
        PayPalAddress, 
        PayPalCity, 
        PayPalState, 
        PayPalZip, 
        PayPalCountry, 
        PayPalCurrency, 
        PayPalPaymentDate, 
        PayPalAmount, 
        PayPalFee,
        NoEnrolees
    )
    VALUES
    (
        @EventID,
        @ModuleID,
        @UserID,
        @Approved,
        @PayPalStatus, 
        @PayPalReason, 
        @PayPalTransID, 
        @PayPalPayerID, 
        @PayPalPayerStatus, 
        @PayPalRecieverEmail, 
        @PayPalUserEmail,
        @PayPalPayerEmail, 
        @PayPalFirstName, 
        @PayPalLastName, 
        @PayPalAddress, 
        @PayPalCity, 
        @PayPalState, 
        @PayPalZip, 
        @PayPalCountry, 
        @PayPalCurrency, 
        @PayPalPaymentDate, 
        @PayPalAmount, 
        @PayPalFee,
        @NoEnrolees
    )
ELSE
    UPDATE {databaseOwner}[{objectQualifier}EventsSignups] SET
        EventID = @EventID,
        UserID = @UserID,
        Approved = @Approved,
        PayPalStatus = @PayPalStatus, 
        PayPalReason = @PayPalReason, 
        PayPalTransID = @PayPalTransID, 
        PayPalPayerID = @PayPalPayerID, 
        PayPalPayerStatus = @PayPalPayerStatus, 
        PayPalRecieverEmail = @PayPalRecieverEmail, 
        PayPalUserEmail = @PayPalUserEmail,
        PayPalPayerEmail = @PayPalPayerEmail, 
        PayPalFirstName = @PayPalFirstName, 
        PayPalLastName = @PayPalLastName, 
        PayPalAddress = @PayPalAddress, 
        PayPalCity = @PayPalCity, 
        PayPalState = @PayPalState, 
        PayPalZip = @PayPalZip, 
        PayPalCountry = @PayPalCountry, 
        PayPalCurrency = @PayPalCurrency, 
        PayPalPaymentDate = @PayPalPaymentDate, 
        PayPalAmount = @PayPalAmount, 
        PayPalFee = @PayPalFee,
        NoEnrolees = @NoEnrolees
    WHERE SignupID = @SignupID and ModuleID = @ModuleID

Select s.EventID, s.SignupID, s.ModuleID, s.Userid, s.Approved,
  u.DisplayName as UserName, u.Email,
  c.EventTimeBegin,c.Duration,c.EventName,c.Importance,c.Approved as EventApproved,
  c.MaxEnrollment,
  (Select Sum(NoEnrolees) from {databaseOwner}[{objectQualifier}EventsSignups] WHERE EventID = c.EventID and c.Signups = 1) as Enrolled,
        PayPalStatus, 
        PayPalReason, 
        PayPalTransID, 
        PayPalPayerID, 
        PayPalPayerStatus, 
        PayPalRecieverEmail, 
        PayPalUserEmail,
        PayPalPayerEmail, 
        PayPalFirstName, 
        PayPalLastName, 
        PayPalAddress, 
        PayPalCity, 
        PayPalState, 
        PayPalZip, 
        PayPalCountry, 
        PayPalCurrency, 
        PayPalPaymentDate, 
        PayPalAmount, 
        PayPalFee,
        NoEnrolees,
        r.EventTimeZoneId
FROM {databaseOwner}{objectQualifier}EventsRecurMaster AS r RIGHT OUTER JOIN
     {databaseOwner}{objectQualifier}Events AS c ON r.RecurMasterID = c.RecurMasterID RIGHT OUTER JOIN
     {databaseOwner}{objectQualifier}EventsSignups AS s LEFT OUTER JOIN
     {databaseOwner}{objectQualifier}Users AS u ON s.UserID = u.UserID ON c.EventID = s.EventID
Where  s.SignupID = scope_identity()
ORDER BY c.EventTimeBegin, c.EventName, UserName
GO

/** EventsSignupsMyEnrollments **/

CREATE PROCEDURE {databaseOwner}{objectQualifier}EventsSignupsMyEnrollments
(
    @ModuleID int,
    @UserID int
)
AS
SET DATEFORMAT mdy
Select s.EventID, s.SignupID, s.ModuleID, s.Userid, s.Approved,
  u.displayName as UserName, u.Email,
  c.EventTimeBegin, DATEADD(mi, c.Duration, c.EventTimeBegin) as EventTimeEnd ,c.EventName,c.Importance,c.Approved as EventApproved,
  c.MaxEnrollment,
  (Select Sum(NoEnrolees) from {databaseOwner}{objectQualifier}EventsSignups WHERE EventID = c.EventID and c.Signups = 1) as Enrolled,
        PayPalStatus, 
        PayPalReason, 
        PayPalTransID, 
        PayPalPayerID, 
        PayPalPayerStatus, 
        PayPalRecieverEmail, 
        PayPalUserEmail,
        PayPalPayerEmail, 
        PayPalFirstName, 
        PayPalLastName, 
        PayPalAddress, 
        PayPalCity, 
        PayPalState, 
        PayPalZip, 
        PayPalCountry, 
        PayPalCurrency, 
        PayPalPaymentDate, 
        PayPalAmount, 
        PayPalFee,
        NoEnrolees,
        r.EventTimeZoneId
FROM {databaseOwner}{objectQualifier}EventsRecurMaster AS r RIGHT OUTER JOIN
     {databaseOwner}{objectQualifier}Events AS c ON r.RecurMasterID = c.RecurMasterID RIGHT OUTER JOIN
     {databaseOwner}{objectQualifier}EventsSignups AS s LEFT OUTER JOIN
     {databaseOwner}{objectQualifier}Users AS u ON s.UserID = u.UserID ON c.EventID = s.EventID LEFT OUTER JOIN
     {databaseOwner}{objectQualifier}EventsMaster AS e ON s.ModuleID = e.SubEventID
Where  s.Userid = @UserID AND (s.ModuleID = @ModuleID Or e.ModuleID = @ModuleID)
ORDER BY c.EventTimeBegin desc
GO

/*** EventsMasterAvailableModules ***/

CREATE PROCEDURE {databaseOwner}{objectQualifier}EventsMasterAvailableModules
(
    @PortalID int,
    @ModuleID int
)
AS
Select @ModuleID as ModuleID, c.PortalID, 0 as MasterID, a.ModuleID as SubEventID
from {databaseOwner}{objectQualifier}Modules a
  left join {databaseOwner}{objectQualifier}ModuleDefinitions b on a.ModuleDefID = b.ModuleDefID 
  left join {databaseOwner}{objectQualifier}DesktopModules d on b.DesktopModuleID = d.DesktopModuleID
  left join {databaseOwner}{objectQualifier}TabModules t on a.ModuleID = t.ModuleID
  left join {databaseOwner}{objectQualifier}Tabs c on t.TabID = c.TabID
  where
     d.ModuleName = 'DNN_Events' AND 
     c.PortalID = @PortalID and 
     a.ModuleID Not In  (select SubEventID from {databaseOwner}{objectQualifier}EventsMaster where ModuleID = @ModuleID) AND
     a.ModuleID Not In (select ModuleID from {databaseOwner}{objectQualifier}EventsMaster where SubEventID = @ModuleID) AND
     a.ModuleID != @ModuleID AND
     t.IsDeleted = 0
Group BY c.PortalID, a.ModuleID 
Order By c.PortalID, a.ModuleID 
GO

/*** EventsModerateEvents ***/

CREATE PROCEDURE {databaseOwner}[{objectQualifier}EventsModerateEvents]
(
    @ModuleID int
)
AS
SET DATEFORMAT mdy
SELECT E.EventID, E.ModuleID, E.EventDateBegin, E.EventDateEnd,
    E.EventTimeBegin, E.Duration, E.EventName, E.EventDesc,
    E.Importance, E.CreatedDate, 
    CreatedBy = U.DisplayName,
    E.CreatedByID,
    E.Every,
    E.Period,
    E.RepeatType,
    E.Notify,
    E.Approved,
    E.MaxEnrollment,
    (Select count(*) from {databaseOwner}[{objectQualifier}EventsSignups] WHERE EventID = E.EventID and E.Signups = 1) as Enrolled,
    E.EnrollRoleID,
    E.EnrollFee, 
    E.EnrollType, 
    E.PayPalAccount, 
    E.Cancelled,
    r.EventTimeZoneId
FROM {databaseOwner}{objectQualifier}Events AS E LEFT OUTER JOIN
     {databaseOwner}{objectQualifier}EventsRecurMaster AS r ON E.RecurMasterID = r.RecurMasterID LEFT OUTER JOIN
     {databaseOwner}{objectQualifier}Users AS U ON E.CreatedByID = U.UserID
WHERE E.Approved = 0
    AND E.ModuleID = @ModuleID AND E.Cancelled = 0
ORDER BY E.EventTimeBegin

GO

/*** EventsModerateSignups ***/

CREATE PROCEDURE {databaseOwner}{objectQualifier}EventsModerateSignups
(
    @ModuleID int
)
AS
SET DATEFORMAT mdy
Select s.EventID, s.SignupID, s.ModuleID, s.Userid, s.Approved,
  --u.FirstName + ' ' + u.LastName as UserName,
  u.DisplayName as UserName, u.Email,
  c.EventDateBegin, c.EventTimeBegin,c.EventName,c.Importance,c.Approved as EventApproved,
  c.MaxEnrollment,
  (Select count(*) from {databaseOwner}{objectQualifier}EventsSignups WHERE EventID = c.EventID and c.Signups = 1) as Enrolled,
                    PayPalStatus, 
        PayPalReason, 
        PayPalTransID, 
        PayPalPayerID, 
        PayPalPayerStatus, 
        PayPalRecieverEmail, 
        PayPalUserEmail,
        PayPalPayerEmail, 
        PayPalFirstName, 
        PayPalLastName, 
        PayPalAddress, 
        PayPalCity, 
        PayPalState, 
        PayPalZip, 
        PayPalCountry, 
        PayPalCurrency, 
        PayPalPaymentDate, 
        PayPalAmount, 
        PayPalFee
FROM {databaseOwner}{objectQualifier}EventsRecurMaster AS r RIGHT OUTER JOIN
     {databaseOwner}{objectQualifier}Events AS c ON r.RecurMasterID = c.RecurMasterID RIGHT OUTER JOIN
     {databaseOwner}{objectQualifier}EventsSignups AS s LEFT OUTER JOIN
     {databaseOwner}{objectQualifier}Users AS u ON s.UserID = u.UserID ON c.EventID = s.EventID
Where s.Approved = 0
  AND s.ModuleID = @ModuleID
ORDER BY c.EventDateBegin, c.EventTimeBegin, c.EventName, UserName
GO

/*** EventsUpgrade ***/

CREATE PROCEDURE {databaseOwner}[{objectQualifier}EventsUpgrade] ( @Version VARCHAR(8) )
AS 
    IF @Version = '04.00.02' 
        BEGIN
-- Copy over Moderators from ModuleSettings
            INSERT  INTO {databaseOwner}[{objectQualifier}ModulePermission]
                    ( RoleID
                    , ModuleID
                    , PermissionID
                    , AllowAccess 
		            )
                    SELECT  {databaseOwner}[{objectQualifier}Modulesettings].SettingValue AS RoleID
                          , {databaseOwner}[{objectQualifier}Modulesettings].ModuleID
                          , {databaseOwner}[{objectQualifier}Permission].PermissionID
                          , -1 AS AllowAccess
                    FROM    {databaseOwner}[{objectQualifier}Modulesettings]
                            INNER JOIN {databaseOwner}[{objectQualifier}Modules]
                            ON {databaseOwner}[{objectQualifier}Modulesettings].ModuleID = {databaseOwner}[{objectQualifier}Modules].ModuleID
                            INNER JOIN {databaseOwner}[{objectQualifier}ModuleDefinitions]
                            ON {databaseOwner}[{objectQualifier}Modules].ModuleDefID = {databaseOwner}[{objectQualifier}ModuleDefinitions].ModuleDefID
                            CROSS JOIN {databaseOwner}[{objectQualifier}Permission]
                    WHERE   ( {databaseOwner}[{objectQualifier}Modulesettings].SettingName = 'moderatorroleid' )
                            AND ( {databaseOwner}[{objectQualifier}Modulesettings].SettingValue <> '0' )
                            AND ( {databaseOwner}[{objectQualifier}ModuleDefinitions].FriendlyName = N'Events' )
                            AND ( {databaseOwner}[{objectQualifier}Permission].PermissionCode = 'EVENTS_MODULE' )
                            AND ( {databaseOwner}[{objectQualifier}Permission].PermissionKey = 'EVENTSMOD' )

-- Ensure Moderators have edit permissions

            INSERT  INTO {databaseOwner}[{objectQualifier}ModulePermission]
                    ( RoleID
                    , ModuleID
                    , PermissionID
                    , AllowAccess 
		            )
                    SELECT  MP1.RoleID
                          , MP1.ModuleID
                          , P3.PermissionID
                          , -1 AS AllowAcces
                    FROM    {databaseOwner}[{objectQualifier}ModulePermission] AS MP1
                            INNER JOIN {databaseOwner}[{objectQualifier}Permission] AS P1
                            ON MP1.PermissionID = P1.PermissionID
                            CROSS JOIN {databaseOwner}[{objectQualifier}Permission] AS P3
                    WHERE   ( P1.PermissionCode = 'Events_Module' )
                            AND ( P1.PermissionKey = 'EVENTSMOD' )
                            AND ( MP1.RoleID NOT IN (
                                  SELECT    MP2.RoleID
                                  FROM      {databaseOwner}[{objectQualifier}ModulePermission] AS MP2
                                            INNER JOIN {databaseOwner}[{objectQualifier}Permission] AS P2
                                            ON MP2.PermissionID = P2.PermissionID
                                            INNER JOIN {databaseOwner}[{objectQualifier}Modules] AS M2
                                            ON MP2.ModuleID = M2.ModuleID
                                            INNER JOIN {databaseOwner}[{objectQualifier}ModuleDefinitions]
                                            AS MD2
                                            ON M2.ModuleDefID = MD2.ModuleDefID
                                  WHERE     ( P2.PermissionCode = 'SYSTEM_MODULE_DEFINITION' )
                                            AND ( P2.PermissionKey = 'EDIT' )
                                            AND ( MD2.FriendlyName = N'Events' )
                                            AND ( M2.ModuleID = MP1.ModuleID ) ) )
                            AND ( P3.PermissionCode = 'SYSTEM_MODULE_DEFINITION' )
                            AND ( P3.PermissionKey = 'EDIT' )

-- Delete Moderator settings from ModuleSettings

            DELETE  FROM {databaseOwner}[{objectQualifier}Modulesettings]
            FROM    {databaseOwner}[{objectQualifier}Modulesettings]
                    INNER JOIN {databaseOwner}[{objectQualifier}Modules]
                    ON {databaseOwner}[{objectQualifier}Modulesettings].ModuleID = {databaseOwner}[{objectQualifier}Modules].ModuleID
                    INNER JOIN {databaseOwner}[{objectQualifier}ModuleDefinitions]
                    ON {databaseOwner}[{objectQualifier}Modules].ModuleDefID = {databaseOwner}[{objectQualifier}ModuleDefinitions].ModuleDefID
            WHERE   ( {databaseOwner}[{objectQualifier}Modulesettings].SettingName = 'moderatorroleid' )
                    AND ( {databaseOwner}[{objectQualifier}ModuleDefinitions].FriendlyName = N'Events' )

        END

    IF @Version = '04.01.00' 
        BEGIN
            UPDATE  {databaseOwner}[{objectQualifier}EventsNotification]
            SET     EventID = E2.EventID
            FROM    {databaseOwner}[{objectQualifier}EventsNotification]
                    INNER JOIN {databaseOwner}[{objectQualifier}Events] AS E
                    ON {databaseOwner}[{objectQualifier}EventsNotification].EventID = E.EventID
                    LEFT OUTER JOIN {databaseOwner}[{objectQualifier}Events] AS E2
                    ON E.RecurMasterID = E2.RecurMasterID
                       AND {databaseOwner}[{objectQualifier}EventsNotification].EventTimeBegin = E2.EventTimeBegin
            WHERE   E2.EventTimeBegin IS NOT NULL
        END

GO

